<?php
/**
 * @file
 * Code for the Agenda feature.
 */

include_once 'pnf_agenda.features.inc';

/**
 * Implements hook_field_formatter_info().
 */
function pnf_agenda_field_formatter_info() {
  $formatters = array(
    'pnf_agenda_date' => array(
      'label' => t('Date agenda PNF'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'description' => t('Displays event dates as needed for PNF agenda.'),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function pnf_agenda_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'pnf_agenda_date':
      foreach ($items as $delta => $item) {
        // Single date
        if ($item['value'] == $item['value2']) {
          $adverb = t('on');
          $iso_date = $item['value'];
        }
        else {
          $now = date('Y-m-d');
          $iso_date = $item['value'];
          $date = substr($iso_date, 0, 10);

          // Two dates in the future
          if ($date > $now) {
            $adverb = t('from');
          }
          // Two dates, start date past.
          else {
            $adverb = t('to');
            $iso_date = $item['value2'];

          }
        }
        $element[$delta] = array('#markup' => pnf_agenda_date_markup($adverb, $iso_date));
      }
      break;
  }

  return $element;
}

/**
 * @param string $adverb Adverb to place in front of agenda date
 * @param string $iso_date Mysql ISO date, as retrieved from database
 * @return string $markup HTML code to display
 */
function pnf_agenda_date_markup($adverb, $iso_date) {
  $day = format_date(strtotime($iso_date),'custom','d');
  $month = format_date(strtotime($iso_date),'custom','M');

  $markup =  '<div class="date_agenda_adverb">' . $adverb . '</div>'
    . '<div class="date_agenda_day">' . $day . '</div>'
    . '<div class="date_agenda_month">' . $month . '</div>';

  return $markup;
}

function pnf_agenda_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    if (empty($node->content['field_downloadable_docs']['#items'])) {
      unset($node->content['field_downloadable_docs']);
    }
  }
}

/**
 * Implements hook_node_view_alter().
 */
function pnf_agenda_node_view_alter(&$build) {
  if ($build['#bundle'] == 'event' && $build['#view_mode'] == 'full') {
    $build['field_public']['#title'] = $build['field_public']['#title'] . ' :';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pnf_agenda_form_event_node_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('park_code') == 'fcb') {
    // We must hide field_public (not used, but compulsory in FCB site).
    $form['field_public']['#access'] = FALSE;

    // We must remove field_sectors (not used in FCB site and not compulsory).
    $form['field_sectors']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_alter().
 */
function pnf_agenda_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-events-page-events') {
    if (variable_get('park_code') == 'fcb') {
      $form['field_sectors_tid']['#access'] = FALSE;
      $form['#info']['filter-field_sectors_tid']['label'] = FALSE;
      $form['field_public_tid']['#access'] = FALSE;
      $form['#info']['filter-field_public_tid']['label'] = FALSE;
    }
  }
}